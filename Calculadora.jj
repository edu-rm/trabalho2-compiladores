options
{
	static = false;
}

PARSER_BEGIN(Calculadora)

package calc;

import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

public class Calculadora{
	private ArrayList<String> numbers = new ArrayList<String>();
	private double finalResultAcumulator = 0;
  	
  	private void emit(String s)
	  {
//	    System.out.print(s + " ");
	  }

	private void push(String s)
	  {
	    System.out.println("Pushed:" + s);
		numbers.add(s);
	  }
	 
	  
	private void pop(String s)
	  {
	    System.out.println("");
	    System.out.println("");
	    int lastElement = numbers.size()-1;
	    String pile = numbers.get(lastElement);
	    String pileNext = numbers.get(lastElement-1); 
	    System.out.println("pile:"+pile);
	    System.out.println("pile next:"+pileNext);
	    double resultOfOperation = 0;
		switch (s) {
		  case "+":
			resultOfOperation = Double.parseDouble(pile) + Double.parseDouble(pileNext);
		    break;
		  case "-":
			resultOfOperation = Double.parseDouble(pile) - Double.parseDouble(pileNext);
		    break;
	      case "/":
			resultOfOperation = Double.parseDouble(pile) / Double.parseDouble(pileNext);
		    break;
		  case "*":
			resultOfOperation = Double.parseDouble(pile) * Double.parseDouble(pileNext);
			break;
		  case "^":

		    break;
		  }
		  
		finalResultAcumulator = resultOfOperation;
		numbers.remove(lastElement);
		numbers.remove(lastElement-1);
		numbers.add(Double.toString(finalResultAcumulator));
//myList.remove(0);
	    
	  }
	 
//	public static void main(String args []) throws ParseException
//	{
// 		try{
// 			System.out.println("Lendo arquivo fonte...");
// 			FileInputStream fis = new FileInputStream(new File("..//Calculadora//src//fonte.txt"));
// 			Calculadora parser = new Calculadora(fis);
// 			parser.Start();
// 			System.out.println("Resultado " + qtdDigitosUm);
// 		}catch (IOException e){
// 			System.out.println("Falha ao abrir arquivo fonte.");
// 			System.exit(0);
// 		}
// 	}
}

PARSER_END(Calculadora)

SKIP : { " "| "\t" | "\n" | "\r" }
TOKEN : { <EOL: ";" > }
TOKEN : {
  < NUMBER : (< digito >)+ > |
  < #digito : [ "0"-"9" ] >
}

// Operandos
TOKEN : {
  <PLUS: "+" > | <MINUS: "-" > |
  <TIMES: "*" > | <DIVISION: "/" > |
  <POWER: "^" >
}

// Símbolos
TOKEN : {
  <OPEN_PARENTHESES: "(" > | <CLOSE_PARENTHESES: ")" > |
  <EQUALS: "=" >
}

void operators():
{}
{
	(<PLUS> | <MINUS> | <TIMES> | <DIVISION> | <POWER>)
}

// Expresion - é o fatorial (número ou uma expr entre paretêses) e uma Expr1
void Expr() :
{}
{
  Termo() Expr1()
}

// Expresion1 - é um mais seguido de um Termo
void Expr1() : {}
{
  < PLUS > Termo() { emit("+"); pop("+"); } Expr1() | {}
}

// Termo - 
void Termo() :
{}
{
  Fator() Termo1() Termo2() Termo3() Termo4()
}

// Termo1 - é uma multiplicação seguido de um fator e ele mesmo OU nada
void Termo1() :
{}
{
  < TIMES > Fator() { emit("*"); pop("*"); } Termo1() | {}
}

void Termo2() :
{}
{
  < DIVISION > Fator() { emit("/"); pop("/"); } Termo2() | {}
}

void Termo3() :
{}
{
  < POWER > Fator() { emit("^"); pop("^"); } Termo3() | {}
}

void Termo4() :
{}
{
  < MINUS > Fator() { emit("-"); pop("-"); } Termo4() | {}
}


// Fator - Número ou uma expression entre parentêses
void Fator() : { Token t; }
{
  t = <NUMBER> { push(t.image); }
  |
  < OPEN_PARENTHESES >
	// O que ta aqui deve ser executado por primeiro?
  	Expr()
  < CLOSE_PARENTHESES >
}


double Start() :
{
  finalResultAcumulator = 0;
}
{
// (<NUMBER> | "(" Expr() ")") Termo1() Termo2() Termo3() Termo4() Expr1() <EOF>
	Expr()
 {
   return finalResultAcumulator;
 }
}

