options
{
	static = false;	
}

PARSER_BEGIN(Calculadora)

package calc;

import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

public class Calculadora{
	private ArrayList<String> numbers = new ArrayList<String>();
	private double finalResultAcumulator = 0;

	private void push(String s)
	  {
		numbers.add(s);
	  }
	 
	  
	private void pop(String s)
	  {
	    int lastElement = numbers.size()-1;
	    String pile = numbers.get(lastElement);
	    String pileNext = numbers.get(lastElement-1); 

		double pileNextParsed = Double.parseDouble(pileNext);
		double pileParsed = Double.parseDouble(pile);

	    double resultOfOperation = 0;	    
		switch (s) {
		  case "+":
			resultOfOperation = pileNextParsed + pileParsed ;
		    break;
		  case "-":
			resultOfOperation = pileNextParsed - pileParsed ;
		    break;
	      case "/":
			resultOfOperation = pileNextParsed / pileParsed;
		    break;
		  case "*":
			resultOfOperation = pileNextParsed * pileParsed;
			break;
		  case "^":
			resultOfOperation = Math.pow(pileNextParsed, pileParsed);
		    break;
		  }
		  
		finalResultAcumulator = resultOfOperation;

		numbers.remove(lastElement);
		numbers.remove(lastElement-1);
		numbers.add(Double.toString(finalResultAcumulator));
	  }
}

PARSER_END(Calculadora)

SKIP : { " "| "\t" | "\n" | "\r" }
TOKEN : { <EOL: ";" > }
TOKEN : {
  < NUMBER : (< digito >)+ > |
  < #digito : [ "0"-"9" ] >
}

// Operandos
TOKEN : {
  <PLUS: "+" > | <MINUS: "-" > |
  <TIMES: "*" > | <DIVISION: "/" > |
  <POWER: "^" >
}

// Símbolos
TOKEN : {
  <OPEN_PARENTHESES: "(" > | <CLOSE_PARENTHESES: ")" > |
  <EQUALS: "=" >
}

void Left() :
{}
{
  Termo() Right()
}

void Right() : {}
{
  < PLUS > Termo() { pop("+"); } Right() | {}
}

void Termo() :
{}
{
  Fator() Multi() Divi() Pot() Min()
}

// Multi - é uma multiplicação seguido de um fator e ele mesmo OU nada
void Multi() :
{}
{
  < TIMES > Fator() { pop("*"); } Multi() | {}
}

void Divi() :
{}
{
  < DIVISION > Fator() { pop("/"); } Divi() | {}
}

void Pot() :
{}
{
  < POWER > Fator() { pop("^"); } Pot() | {}
}

void Min() :
{}
{
  < MINUS > Fator() { pop("-"); } Min() | {}
}


// Fator - Número ou uma exp entre parentêses
void Fator() : { Token t, t1 = null; }
{
  
  ( t1 = < MINUS >| t1 = < PLUS >)? t = <NUMBER>
  {
	String toPush = t.image;
	if (t1 != null) {
		toPush = t1.image + toPush;
	}
    push(toPush);
  }
  |
  < OPEN_PARENTHESES >
  	Left()
  < CLOSE_PARENTHESES >
}



double Start() :
{
  finalResultAcumulator = 0;
}
{
	Left()
 {
   return finalResultAcumulator;
 }
}

